name: Build AARs and Upload to Release

on:
  release:
    types: [published]

env:
  LIB1_NAME: alipaylibrary

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Build all AARs
        run: |
          ./gradlew clean
          ./gradlew :${{ env.LIB1_NAME }}:assembleRelease

      - name: Upload AARs to Release (${{ env.LIB1_NAME }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.LIB1_NAME }}/build/outputs/aar/${{ env.LIB1_NAME }}-release.aar
          asset_name: ${{ env.LIB1_NAME }}-release.aar
          asset_content_type: application/octet-stream

      - name: Verify Release Tag
        run: |
          if [[ ! "${{ github.event.release.tag_name }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Must be like 1.0.0 or v1.0.0"
            exit 1
          fi

      - name: Trigger and Monitor JitPack Build
        env:
          JITPACK_TOKEN: ${{ secrets.JITPACK_TOKEN }}
        run: |
          # ËÆæÁΩÆÂèòÈáè
          VERSION=${{ github.event.release.tag_name }}
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}
          API_URL="https://jitpack.io/api/builds/com.github.$OWNER/$REPO/$VERSION"
          
          echo "üöÄ Triggering JitPack build for: com.github.$OWNER/$REPO@$VERSION"
          echo "üîó Build progress: https://jitpack.io/#$OWNER/$REPO/$VERSION"
          
          # ÂàùÂßãÊûÑÂª∫ËØ∑Ê±Ç
          echo "üîç Making initial build request..."
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer $JITPACK_TOKEN" \
            "$API_URL")
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep HTTP_STATUS: | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/d')
          
          echo "üì¶ Initial API Response: $BODY"
          echo "üî¢ HTTP Status: $HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "‚ùå Failed to trigger build (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          # Áä∂ÊÄÅÊ£ÄÊü•ËÆæÁΩÆ
          MAX_CHECKS=60  # 60Ê¨°√ó30Áßí=30ÂàÜÈíü
          CHECK_INTERVAL=30
          CHECK_COUNT=0
          START_TIME=$(date +%s)
          TIMEOUT=$((30 * 60))  # 30ÂàÜÈíüË∂ÖÊó∂ÔºàÁßíÔºâ
          
          while [[ $CHECK_COUNT -lt $MAX_CHECKS ]]; do
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          
            ((CHECK_COUNT++))
            echo "üîÑ Check #$CHECK_COUNT/$MAX_CHECKS (Elapsed: $((ELAPSED_TIME/60))m $((ELAPSED_TIME%60))s)"
          
            STATUS_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
              -H "Authorization: Bearer $JITPACK_TOKEN" \
              "$API_URL")
          
            STATUS_HTTP=$(echo "$STATUS_RESPONSE" | grep HTTP_STATUS: | cut -d':' -f2)
            STATUS_BODY=$(echo "$STATUS_RESPONSE" | sed '/HTTP_STATUS:/d')
          
            # ÊèêÂèñstatusÂ≠óÊÆµ
            STATUS=$(echo "$STATUS_BODY" | grep -o '"status"[[:space:]]*:[[:space:]]*"[^"]*"' | head -1 | cut -d'"' -f4 | tr '[:upper:]' '[:lower:]')
          
            echo "üìä Build status: ${STATUS:-unknown}"
          
            case "${STATUS}" in
              "ok")
                echo "üéâ ‚úÖ Build succeeded!"
                exit 0
                ;;
              "error")
                echo "üí• ‚ùå Build failed!"
                exit 1
                ;;
              *)
                if [[ $CHECK_COUNT -eq $MAX_CHECKS ]]; then
                  echo "‚è∞ Timeout reached (30 minutes). Build may still be processing on JitPack."
                  echo "‚ÑπÔ∏è Note: JitPack builds can sometimes take longer than 30 minutes."
                  echo "üîó Check later at: https://jitpack.io/#$OWNER/$REPO/$VERSION"
                  exit 0  # ÈùûÂ§±Ë¥•ÈÄÄÂá∫
                fi
                echo "‚è≥ Waiting $CHECK_INTERVAL seconds before next check..."
                sleep $CHECK_INTERVAL
                ;;
            esac
          done

      - name: Final Status
        run: |
          echo "üèÅ JitPack build monitoring completed"
          echo "‚ÑπÔ∏è Note: If build is still processing, check later at:"
          echo "https://jitpack.io/#${{ github.repository }}/${{ github.event.release.tag_name }}"